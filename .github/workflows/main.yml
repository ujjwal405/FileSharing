name: "CICD Pipeline"

on:
  push:
    branches:
      - master
    paths-ignore:
      - "!README.md"

permissions:
  security-events: write
  contents: read
  id-token: write

concurrency:
  group: "master-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  gitleaks-scan:
    uses: ./.github/workflows/gitleaks-scan.yml

  snyk-golang-scan:
    needs: gitleaks-scan
    uses: ./.github/workflows/snyk-golang-scan.yml
    secrets: inherit

  snyk-terraform-scan:
    needs: snyk-golang-scan
    uses: ./.github/workflows/snyk-terraform-scan.yml
    secrets: inherit

  terraform-cd:
    needs: snyk-terraform-scan
    uses: ./.github/workflows/cd.yml
    secrets: inherit

  slack:
    needs: [gitleaks-scan, snyk-golang-scan, snyk-terraform-scan, terraform-cd]
    runs-on: ubuntu-latest
    if: always()
    steps:
      # 1) Decide success vs failure in shell
      - name: Determine overall CI status
        id: get_status
        run: |
          echo "status=success" >> $GITHUB_OUTPUT

          # if any needed job did _not_ succeed, flip to failure
          if [[ "${{ needs.gitleaks-scan.result }}" != "success" ]] \
             || [[ "${{ needs.snyk-golang-scan.result }}" != "success" ]] \
             || [[ "${{ needs.snyk-terraform-scan.result }}" != "success" ]] \
             || [[ "${{ needs.terraform-cd.result }}" != "success" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      # 2) Pass that status into Slack
      - name: Slack Notification
        uses: act10ns/slack@v2
        with:
          channel: "#ci"
          status: ${{ steps.get_status.outputs.status }}
          steps: ${{ toJson(steps) }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          config: .github/config/slack.yml
